Here's a short list of things we can do
---------------------------------------

- Kernel (to clone simulation / build sub-simulation)
  - Add the copy assignable traits
  - Add the move constructible traits
  - Add the move assignable traits

- Parallel multi/kernel
  - How to define parallel vle::Simulation class ?

- Engines
  - Initialization system:
    - Add a generic init system for all engines/models in CTOR to permit the
      use of an experimental frames manager.
  - Add a thread pool system in context to avoid the specific thread pool in
    the DSDE coupled model.
  - Add a **dtss** engine.
    - Use the `std::is_integral <Time::type>::value` to ensure type of the
      template.
  - Add an observation function, but when call it ? We can provide
    several methods: timed (at the end of the simulation or following
    a time step) and event (when a model produce an output).
  - Add feature to avoid update of the scheduler in transition function.
  - DSDE/DEVS: improve the algorithms and API to remove the template parameters
    of children (time, input and output ports) in coupled/executive model to
    suppress the virtual function.

- Project
  - Change the name of VLE
  - Hide any boost type from public API
    - Hide boost::fibonacci_heap
  - Cleanup unit test.
  - Add a manager mode
  - Add a new vpz format
    - Add an xml parser
    - Add a vpz class which maintains the contents of the `vle::vpz`.

- Utils
  - Add the package system as in VLE > 1.1
    - Add a spawn system
  - Add the module system as in VLE > 1.1
    - Add the module system
    - Add a clean API module access to the environment
  - Use classic appdirs directories
  - Add classical path function: dirname(), basename(), extension(), etc.
